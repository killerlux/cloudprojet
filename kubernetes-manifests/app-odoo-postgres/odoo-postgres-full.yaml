# Namespace: clay-technology-prod (s'assurer que ce namespace existe)

# --- Configuration pour PostgreSQL ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: clay-technology-prod
  labels:
    app: postgres
    env: prod
    project: clay-tech
data:
  POSTGRES_DB: odoo_db
  POSTGRES_USER: odoo_user
  POSTGRES_PASSWORD: StrongPassword123 # À changer pour une vraie production

---
# --- PersistentVolume pour PostgreSQL (type hostPath) ---
# Rappel : Le chemin /mnt/data-postgres-pv doit être créé MANUELLEMENT sur le NŒUD WORKER
# et avoir les permissions appropriées (ex: sudo mkdir -p /mnt/data-postgres-pv && sudo chmod 777 /mnt/data-postgres-pv)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: clay-technology-prod # Le PV est un objet cluster-wide, mais le labeler pour le contexte est une bonne pratique.
  labels:
    type: local
    app: postgres
    env: prod
    project: clay-tech
spec:
  storageClassName: manual # Important pour lier explicitement au PVC
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce # Convient pour une base de données sur un seul pod
  hostPath:
    path: "/mnt/data-postgres-pv" # Chemin sur le nœud worker

---
# --- PersistentVolumeClaim pour PostgreSQL ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: clay-technology-prod
  labels:
    app: postgres
    env: prod
    project: clay-tech
spec:
  storageClassName: manual # Doit correspondre au PV
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  # selector: # Peut être utilisé pour sélectionner un PV spécifique basé sur les labels
  #   matchLabels:
  #     type: local
  #     app: postgres

---
# --- Déploiement de PostgreSQL ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: clay-technology-prod
  labels:
    app: postgres
    env: prod
    project: clay-tech
spec:
  replicas: 1 # PostgreSQL ne se scale pas horizontalement facilement sans solutions tierces
  selector:
    matchLabels:
      app: postgres
      env: prod
      project: clay-tech
  template:
    metadata:
      labels:
        app: postgres
        env: prod
        project: clay-tech
    spec:
      containers:
      - name: postgres
        image: postgres:13
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: postgres-config # Utilise le ConfigMap pour les variables d'environnement
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data # Chemin standard pour les données PostgreSQL
        # SecurityContext important pour la gestion des permissions du volume hostPath si les permissions sur le host sont restrictives.
        # Pour ce TP, nous avons simplifié avec chmod 777 sur le hostPath.
        # securityContext:
        #   runAsUser: 999 # UID de l'utilisateur postgres dans l'image postgres
        #   fsGroup: 999   # GID de l'utilisateur postgres dans l'image postgres
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc # Lie au PVC défini ci-dessus
      # nodeSelector: # Pourrait être utilisé pour forcer le pod PG sur le nœud où /mnt/data-postgres-pv existe
      #   kubernetes.io/hostname: k8s-worker01 # Si besoin de cibler un noeud spécifique pour le hostPath

---
# --- Service pour PostgreSQL (ClusterIP) ---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service # Nom utilisé par Odoo pour se connecter
  namespace: clay-technology-prod
  labels:
    app: postgres
    env: prod
    project: clay-tech
spec:
  type: ClusterIP # Service interne, non exposé à l'extérieur du cluster
  selector:
    app: postgres # Doit correspondre aux labels du pod PostgreSQL
    env: prod
    project: clay-tech
  ports:
  - port: 5432
    targetPort: 5432

---
# --- Déploiement d'Odoo ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: odoo-deployment
  namespace: clay-technology-prod
  labels:
    app: odoo
    env: prod
    project: clay-tech
spec:
  replicas: 1 # Pour commencer. Odoo peut être scalé si la session est gérée correctement.
  selector:
    matchLabels:
      app: odoo
      env: prod
      project: clay-tech
  template:
    metadata:
      labels:
        app: odoo
        env: prod
        project: clay-tech
    spec:
      containers:
      - name: odoo
        image: odoo:16.0
        imagePullPolicy: "IfNotPresent"
        env:
        - name: HOST
          value: "postgres-service" # Nom du service PostgreSQL
        - name: PORT
          value: "5432"
        - name: USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: PASSWORD
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_PASSWORD
        # Odoo utilise aussi PGUSER, PGPASSWORD, PGHOST, PGDATABASE
        # Pour plus de clarté, on peut aussi les définir explicitement ou s'assurer qu'Odoo les déduit de HOST/USER/PASSWORD
        - name: PGHOST
          value: "postgres-service"
        - name: PGDATABASE
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        ports:
        - containerPort: 8069 # Port standard d'Odoo
        # Volume pour les addons Odoo personnalisés (non utilisé dans ce TP simple)
        # volumeMounts:
        # - name: odoo-addons
        #   mountPath: /mnt/extra-addons
        resources:
          limits:
            memory: "1Gi" # Odoo peut être gourmand
            cpu: "1"
          requests:
            memory: "512Mi"
            cpu: "500m"
      # volumes:
      # - name: odoo-addons
      #   emptyDir: {} # Ou un autre type de volume pour les addons

---
# --- Service pour Odoo (NodePort) ---
apiVersion: v1
kind: Service
metadata:
  name: odoo-service
  namespace: clay-technology-prod
  labels:
    app: odoo
    env: prod
    project: clay-tech
spec:
  type: NodePort
  selector:
    app: odoo # Doit correspondre aux labels du pod Odoo
    env: prod
    project: clay-tech
  ports:
  - name: http
    protocol: TCP
    port: 8069 # Port du service interne au cluster
    targetPort: 8069 # Port sur lequel le conteneur Odoo écoute
    # NodePort: (sera assigné dynamiquement par Kubernetes) 